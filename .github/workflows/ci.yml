name: CI

on:
  push:
    branches: [ main, mcp ]
  pull_request:
    branches: [ main, mcp ]

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Lint with ruff
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/

    - name: Type check with pyright
      run: |
        uv run pyright src/llmring/

    - name: Enforce no hardcoded models policy
      run: |
        echo "üîç Checking for hardcoded model names (banned in src/, docs/, examples/)..."

        # Define banned patterns - hardcoded model names
        violations=0

        # Check for common hardcoded model patterns
        patterns=(
          "gpt-[34]"
          "claude-[34]"
          "gemini-[12]"
          "o1-"
          "opus-[34]"
          "sonnet-[34]"
          "haiku-[34]"
          "llama[23]"
        )

        for pattern in "${patterns[@]}"; do
          echo "Checking pattern: $pattern"
          if grep -r -E "$pattern" src/ docs/ examples/ --include="*.py" --include="*.md" 2>/dev/null; then
            echo "‚ùå Found hardcoded model pattern: $pattern"
            violations=$((violations + 1))
          fi
        done

        if [ $violations -gt 0 ]; then
          echo ""
          echo "‚ùå CI FAILURE: Found $violations hardcoded model pattern(s)"
          echo "   Use semantic aliases instead: 'fast', 'balanced', 'deep', 'local'"
          echo "   Hardcoded models only allowed in tests/ for testing specific providers"
          echo "   See lockfile for alias definitions: llmring.lock"
          exit 1
        else
          echo "‚úÖ No hardcoded model patterns found - correctly using aliases"
        fi

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --tb=short

    - name: Run integration tests (skip if no API keys)
      run: |
        uv run pytest tests/integration/ -v --tb=short -k "not (test_openai and not OPENAI_API_KEY) and not (test_anthropic and not ANTHROPIC_API_KEY) and not (test_google and not GOOGLE_GEMINI_API_KEY)"
      continue-on-error: true  # Don't fail CI if API keys missing

    - name: Check package build
      run: |
        uv build

  publish:
    needs: quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync

    - name: Build package
      run: uv build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv run pip install twine
        uv run twine upload dist/*